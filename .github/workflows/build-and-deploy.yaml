name: Build & Deploy

# Allow building on each push as opposed to push on master and PRs for other branches as GitHub provides a "merge" git
# ref for PR of any branch. This corrupts the Docker repository.
on: [push]

env:
  CI_IMAGE_REPOSITORY: docker.pkg.github.com/${{ github.repository }}
  CI_COMMIT_SHA: ${{ github.sha }}
  RELEASE_NAME: weather-app

jobs:
  # Build the image.
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Log into registry.
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Build image.
        run: |
          # Strip git ref prefix from version.
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          docker pull ${CI_IMAGE_REPOSITORY}/node:${VERSION} || docker pull ${CI_IMAGE_REPOSITORY}/node:latest | true
          docker build --pull \
            --cache-from "${CI_IMAGE_REPOSITORY}/node:${VERSION},${CI_IMAGE_REPOSITORY}/node:latest" \
            -t ${CI_IMAGE_REPOSITORY}/node:${CI_COMMIT_SHA} -t ${CI_IMAGE_REPOSITORY}/node:latest \
            -f ops/docker/node/Dockerfile .
          docker push ${CI_IMAGE_REPOSITORY}/node:${CI_COMMIT_SHA}

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    name: Push
    # Ensure build job passes before pushing image.
    needs: build

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Log into registry.
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Pull image.
        run: docker pull ${CI_IMAGE_REPOSITORY}/node:${CI_COMMIT_SHA}

      - name: Tag and Push image.
        run: |
          IMAGE_ID=${CI_IMAGE_REPOSITORY}/node

          # Change all uppercase to lowercase.
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version.
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name.
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention.
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag ${CI_IMAGE_REPOSITORY}/node:${CI_COMMIT_SHA} $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  deploy:
    name: Deploy
    needs: push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Log into registry.
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      - name: Verify Kubernetes and Helm.
        run: |
          which kubectl
          which helm
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DEPLOYMENT_TOKEN }}
      - name: Deploy
        run: |
          IMAGE_ID=${CI_IMAGE_REPOSITORY}/node

          # Change all uppercase to lowercase.
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version.
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name.
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention.
          [ "$VERSION" == "master" ] && VERSION=latest

          doctl kubernetes cluster kubeconfig save ${{ secrets.KUBERNETES_CLUSTER_NAME }}

          # Deploy.
          cd ops/k8s/
          helm dependency build ./weather-app
          helm upgrade \
            --install \
            --atomic \
            --namespace ${RELEASE_NAME} \
            --set web.node.image.repository=${IMAGE_ID} \
            --set web.node.image.tag=${VERSION} \
            --set app.config.autocomplete.apiId=${{ secrets.HERE_MAPS_API_ID }} \
            --set app.config.autocomplete.appCode=${{ secrets.HERE_MAPS_APP_CODE }} \
            --set app.config.weather.apiKey=${{ secrets.DARKSKY_API_KEY }} \
            ${RELEASE_NAME} ./weather-app
